/**
 * =====================================
 * # ( name ; value )
 *
 * PURPOSE:
 *		# ( name ; value ) creates a string designed to be sent as a script
 *		parameter to a script using the DeclareVariables function to receive
 *		named parameters. You can create a string for multiple named parameters
 *		by concatenating multiple calls to this function.
 *
 * RETURNS:
 *		A string of the form $name = "value";¶ that can be evaluated by the
 *		#Assign ( parameters ) function.
 *
 * PARAMETERS:
 *		name: The name of the name-value pair to create
 *		value: The value of the name-value pair to create
 *
 * EXAMPLE:
 *		# ( "name1"; $value1 ) & # ( "name2" ; "value2" )
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		Do not include the $ prefix in the "name" parameter; this function adds
 *		$ for you. This function will strip all $ characters from the name
 *		passed to it.
 *
 * HISTORY:
 *		MODIFIED on 2011-05-13 by Jeremy Bante to strip spaces and "=" from
 *		names.
 *		MODIFIED on 2010-11-23 by Jeremy Bante to strip "$" characters from the
 *		named parameter.
 *		MODIFIED on 2010-10-04 by Jeremy Bante to fit syntax inspired by
 *		a comment on standards.filemakermagazine.com by Richard Dyce, which was
 *		originally used by Jesse Antunes of six.fried.rice.
 *		CREATED on 2010-02-08 by Jeremy Bante <http://scr.im/jbante>.
 *		Inspired by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 *		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */

Let ( [
	~name = // remove leading dollar sign's, which are valid Let() variables, but do not work with the format of this function
		Case (
			Left ( name ; 2 ) = "$$" ;
			Right ( name ; Length ( name ) - 2 ) ;
			
			Left ( name ; 1 ) = "$" ;
			Right ( name ; Length ( name ) - 1 ) ;
			
			name
		) ;		
	~dateChars = "\\/-" ;	// list of characters used as separators in a date field
	~timeChars = ":" ;	// list of characters used as separators in a time field
	~value = If (
		value <> getasnumber ( value ) ;
		Quote ( value ) ;
		
	// value is number, timestamp, date, or time
		Case (
			not isempty ( Filter ( value ; ~dateChars ) ) and not isempty ( Filter ( value ; ~timeChars ) ) ;
			"GetAsTimestamp ( " & GetAsNumber( value ) & ")" ;
			
			not isempty ( Filter ( value ; ~dateChars ) ) ;
			"GetAsDate ( " & GetAsNumber( value ) & ")" ;
			
			not isempty ( Filter ( value ; ~timeChars ) ) ;
			"GetAsTime ( " & GetAsNumber( value ) & ")" ;

		// this section should never be reached, it's just a fail-safe
			Quote ( value )
		)
	) ;
	~parameters = "$" & ~name & " = " & ~value & ";¶" ;
	~evaluateString = 
			"Let( ["
			& ~parameters
			& "void = \"\""  //terminating variable to keep semicolon-delimited sytax in variableString consistent
			& "¶];¶"
			& "$" & ~name
			& "¶)"
] ;
	Case (
		IsValidExpression ( ~evaluateString ) ;
			~parameters ;

		//else, ~evaluateString is not a valid expression...
			"//ERROR name=" & Quote ( name ) & " value=" & Quote ( value )
	)
)