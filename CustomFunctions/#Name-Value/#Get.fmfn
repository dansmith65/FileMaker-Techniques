/**
 * =====================================
 * #Get ( parameters ; name )
 *		https://github.com/petrowsky/fmpstandards/blob/master/Functions/%23Get.fmfn
 *
 * PURPOSE:
 *		Retrieves values from a name-value pair list created with the
 *		# ( name ; value ) function. This function does not set any variables,
 *		making it non-destructive, in contrast with the #Assign functions, which
 *		may over-write the contents of variables.
 *
 * RETURNS:
 *		The value from the name-value pair specified by the name parameter. If
 *		such a value is not in the list, the function returns Null ("").
 *
 * PARAMETERS:
 *		parameters: The (potentially Null) string of name-value pairs.
 *		name: The name of the name-value pair from which to retrieve the value.
 *
 * EXAMPLES:
 *		#Get ( # ( "name1"; "value1" ) ; "name1" ) //= value1
 *		#Get ( # ( "name1"; "value1" ) ; "name2" ) //= Null
 *		#Get ( "This is not a valid name-value pair string" ; "name" ) //= Null
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2011-05-13 by Jeremy Bante to strip spaces and "=" from
 *		names.
 *		MODIFIED on 2011-02-13 by Jeremy Bante to retrieve the last occurrence
 *		of a named value, making behavior more consistent with the #Assign
 *		functions.
 *		CREATED on 2011-01-14 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */

Let ( [
	~parameters =	// convert $variables to local Let() variables
		Substitute (
			"¶" & parameters ;
			[ "¶$" ; "¶" ]
		) ;
	~evaluateString = 
			"Let( ["
			& ~parameters
			& "void = \"\""  //terminating variable to keep semicolon-delimited sytax in variableString consistent
			& "¶];¶"
			& name
			& "¶)"
] ;	//end variable definitions

		Case (
			IsValidExpression ( ~evaluateString );
					Evaluate ( ~evaluateString );

			//else, ~evaluateString is not a valid expression...
					""
	)

)

/*
 * =====================================
// Unit test
Let ( [
	~value1 = Random;
	~test1 =
		"#Get ( # ( \"name\" ; "
		& ~value1
		& " ) ; \"name\" )";
	~evaluate1 = Evaluate ( ~test1 );
	~result1 = If ( ~evaluate1 = ~value1 ; "Pass" ; "Fail" );

	~value2 = Random;
	~test2 =
		"#Get ( # ( \"name\" ; "
		& ~value2
		& " ) ; \"differentName\" )";
	~evaluate2 = Evaluate ( ~test2 );
	~result2 = If ( IsEmpty ( ~evaluate2 ) ; "Pass" ; "Fail" );

	~value3 = "This is not a valid name-value pair string";
	~test3 =
		"#Get ( "
		& Quote ( ~value3 )
		& " ; \"name\" )";
	~evaluate3 = Evaluate ( ~test3 );
	~result3 = If ( IsEmpty ( ~evaluate3 ) ; "Pass" ; "Fail" );

	~value4 = "value 1";
	~value5 = "value 2";
	~test4 =
		"#Get ( # ( \"name1\" ; "
		& Quote ( ~value4 )
		& " ) & # ( \"name2\" ; "
		& Quote ( ~value5 )
		& " ) ; \"name1\" )";
	~evaluate4 = Evaluate ( ~test4 );
	~result4 = If ( ~evaluate4 = ~value4 ; "Pass" ; "Fail" );

	~test5 =
		"#Get ( # ( \"name1\" ; "
		& Quote ( ~value4 )
		& " ) & # ( \"name2\" ; "
		& Quote ( ~value5 )
		& " ) ; \"name2\" )";
	~evaluate5 = Evaluate ( ~test5 );
	~result5 = If ( ~evaluate5 = ~value5 ; "Pass" ; "Fail" );


	~value6 = "value 6";
	~test6 =
		"#Get ( # ( \"name1\" ; "
		& Quote ( ~value4 )
		& " ) & # ( \"name2\" ; "
		& Quote ( ~value5 )
		& " ) & # ( \"name1\" ; "
		& Quote ( ~value6 )
		& " ) ; \"name1\" )";
	~evaluate6 = Evaluate ( ~test6 );
	~result6 = If ( ~evaluate6 = ~value6 ; "Pass" ; "Fail" )

];
	List (
		~test1 & " = " & ~evaluate1 & " // " & ~result1;
		~test2 & " = " & ~evaluate2 & " // " & ~result2;
		~test3 & " = " & ~evaluate3 & " // " & ~result3;
		~test4 & " = " & ~evaluate4 & " // " & ~result4;
		~test5 & " = " & ~evaluate5 & " // " & ~result5;
		~test6 & " = " & ~evaluate6 & " // " & ~result6
	)
)
 * =====================================
 */